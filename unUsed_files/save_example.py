report_data = {}


@dp.message_handler(Command('report'))
async def calculate_report(message: types.Message, state: FSMContext):
    check = message.from_user.id  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if check in config.usr_admins:
        await bot.send_message(chat_id=INFO,
                               text=f'üîë –†–µ–ø–æ—Ä—Ç [{message.from_user.full_name, message.from_user.id}]')

        cursor.execute("SELECT * FROM otchet")
        conn.commit()

        await message.answer(f"\n\nüìä –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–¢–ß–ï–¢–ê üìäÔ∏è")
        try:
            await message.answer(f'\n\nüí∞ –í –∫–∞—Å—Å–µ –æ—Å—Ç–æ–≤–∞–ª–æ—Å—å : {cursor.fetchall()[-1][-3]} ‚ÇΩ')
        except IndexError:
            await message.answer("ü™∂ –¢–ê–ë–õ–ò–¶–ê –ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ê ü™∂")
            await bot.send_message(chat_id=INFO, text='üõë –¢–ê–ë–õ–ò–¶–ê –ù–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ê!!!')
            pass

        await message.answer(f'{tx.instr_1}')
        await fsm.Reports.R1.set()

    else:
        await message.answer('üë®üèΩ‚Äçüíª –í —Ä–∞–∑—Ä–∞–±–æ–∫–µ!')


@dp.message_handler(state=fsm.Reports.R1)
async def input_report(message: types.Message, state: FSMContext):
    try:
        money_in_the_morning = int(message.text)

    except ValueError:
        await message.answer(f'{tx.err_or_1}')
        await message.answer(f'{tx.instr_1}')
        return input_report

    await state.update_data(money_in_the_morning=money_in_the_morning)
    await message.answer(f'{tx.instr_2}')
    await fsm.Reports.R2.set()


@dp.message_handler(state=fsm.Reports.R2)
async def input_report(message: types.Message, state: FSMContext):
    try:
        proceeds = int(message.text)

    except ValueError:
        await message.answer(f'{tx.err_or_1}')
        await message.answer(f'{tx.instr_2}')
        return input_report

    await state.update_data(proceeds=proceeds)
    await message.answer(f'{tx.instr_3}')
    await fsm.Reports.R3.set()


@dp.message_handler(state=fsm.Reports.R3)
async def input_report(message: types.Message, state: FSMContext):
    try:
        cashless = int(message.text)

    except ValueError:
        await message.answer(f'{tx.err_or_1}')
        await message.answer(f'{tx.instr_3}')
        return input_report

    await state.update_data(cashless=cashless)
    await message.answer(f'{tx.instr_4}')
    await fsm.Reports.R4.set()


@dp.message_handler(state=fsm.Reports.R4)
async def input_report(message: types.Message, state: FSMContext):
    try:
        collection = int(message.text)

    except ValueError:
        await message.answer(f'{tx.err_or_1}')
        await message.answer(f'{tx.instr_4}')
        return input_report

    await state.update_data(collection=collection)
    await message.answer(f'{tx.instr_5}')
    await fsm.Reports.R5.set()


@dp.message_handler(state=fsm.Reports.R5)
async def input_report(message: types.Message, state: FSMContext):
    try:
        costs = int(message.text)

    except ValueError:
        await message.answer(f'{tx.err_or_1}')
        await message.answer(f'{tx.instr_5}')
        return input_report

    await state.update_data(costs=costs)
    await message.answer(f'{tx.instr_6}')
    await fsm.Reports.R6.set()


@dp.message_handler(state=fsm.Reports.R6)
async def input_report(message: types.Message, state: FSMContext):
    try:
        fact = int(message.text)

    except ValueError:
        await message.answer(f'{tx.err_or_1}')
        await message.answer(f'{tx.instr_6}')
        return input_report

    await state.update_data(fact=fact)
    report_data = await state.get_data()

    async def start_report(report_data):
        money_in_the_morning = int(report_data['money_in_the_morning'])
        proceeds = int(report_data['proceeds'])
        cashless = int(report_data['cashless'])
        collection = int(report_data['collection'])
        costs = int(report_data['costs'])
        fact = int(report_data['fact'])
        cash_1 = proceeds - cashless  # –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–∫—É
        cash_2 = proceeds - cashless - collection - costs  # –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –∏–Ω–∫—Å –∏ –¥–æ–ø —Ä–∞—Å—Ö–æ–¥
        kassa = money_in_the_morning + cash_2  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Å—Å—É

        ####################################################################################################

        form = f""" 
    üóì {datetime.datetime.now().strftime("%d-%m-%Y %H:%M")}\n
    üî∫        –û–¢–ß–ï–¢        üîª\n
    ‚Ü¶ –í—ã—Ä—É—á–∫–∞: {proceeds} ‚ÇΩ
    ‚Ü¶ –ë–µ–∑–Ω–∞–ª: {cashless} ‚ÇΩ
    ‚Ü¶ –ù–∞–ª–∏—á–Ω—ã–º–∏: {cash_1} ‚ÇΩ
    ‚Ü¶ –ò–Ω–∫–∞—Å—Å–∞—Ü–∏–∏:{collection} ‚ÇΩ
    ‚Ü¶ –î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã:{costs} ‚ÇΩ
    ‚Ü¶ –§–∞–∫—Ç: {fact}‚ÇΩ

            """
        ####################################################################################################

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–∞—Å—Å–µ
        if fact == kassa:

            await message.answer(f'{form}\n–í –∫–∞—Å—Å–µ: {str(kassa)}‚ÇΩ\n–ö–∞—Å—Å–∞ —Ä–æ–≤–Ω–∞—è! „Ç∑ ')

            await bot.send_message(chat_id=INFO,
                                   text=f'{form}\n–í –∫–∞—Å—Å–µ: {str(kassa)}‚ÇΩ\n'
                                        f'–ö–∞—Å—Å–∞ —Ä–æ–≤–Ω–∞—è! „Ç∑ ')


        elif fact > kassa:

            await message.answer(
                f'{form}\n–í –∫–∞—Å—Å–µ {str(fact)}‚ÇΩ '
                f'\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å {str(kassa)}‚ÇΩ\n'
                f'–°—É–º–º–∞ –±–æ–ª—å—à–µ –Ω–∞ {str(fact - kassa)}‚ÇΩ')

            await bot.send_message(chat_id=INFO,
                                   text=f'{form}\n–í –∫–∞—Å—Å–µ {str(fact)}‚ÇΩ '
                                        f'\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å {str(kassa)}‚ÇΩ\n–°—É–º–º–∞ '
                                        f'–±–æ–ª—å—à–µ –Ω–∞ {str(fact - kassa)}‚ÇΩ')



        else:
            await message.answer(
                f'{form}\n–í –∫–∞—Å—Å–µ {str(fact)}‚ÇΩ '
                f'\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å {str(kassa)}‚ÇΩ.\n'
                f'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {str(kassa - fact)}‚ÇΩ')

            await bot.send_message(chat_id=INFO,
                                   text=f'{form}\n–í –∫–∞—Å—Å–µ {str(fact)}‚ÇΩ '
                                        f'\n–î–æ–ª–∂–Ω–æ –±—ã—Ç—å {str(kassa)}‚ÇΩ.\n'
                                        f'–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç {str(kassa - fact)}‚ÇΩ')

        priz = 9000
        difference = priz - proceeds

        if proceeds >= priz:
            await message.answer('üèÜ –ü–†–ï–ú–ò–Ø ü•á:\n\n–£—Ä–∞–∞... '
                                 '–í–∞–º –ø–æ–ª–æ–∂–µ–Ω–∞ –ø—Ä–µ–º–∏—è 500‚ÇΩ –∑–∞ '
                                 '—Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É! üéäüéâüéà\n')
            await message.answer('ü§ë')


        elif proceeds >= priz - 1000:
            await message.answer(f'ü•à –ü–†–ï–ú–ò–Ø ü•à:\n\nüöñ–í–∞–º –ø–æ–ª–æ–∂–µ–Ω–Ω–æ –¢–∞–∫—Å–∏ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã! üöñ\n'
                                 f'–î–æ üèÜ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ {str(difference)} ‚ÇΩ  ü§¨ üò≠\n')



        elif proceeds >= priz - 2000:
            await message.answer('ü•â –ü–†–ï–ú–ò–Ø ü•â:\n\n'
                                 'üöñ –í–∞–º –ø–æ–ª–æ–∂–µ–Ω–Ω–æ –¢–∞–∫—Å–∏ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É! üöñ\n')

        return

    await start_report(report_data)
    await state.finish()

    money_in_the_morning = int(report_data['money_in_the_morning'])
    proceeds = int(report_data['proceeds'])
    cashless = int(report_data['cashless'])
    collection = int(report_data['collection'])
    costs = int(report_data['costs'])
    fact = int(report_data['fact'])
    cash_1 = proceeds - cashless
    # –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–∫—É,
    cash_2 = proceeds - cashless - collection - costs
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Å—Å—É
    kassa = money_in_the_morning + cash_2
    check = message.from_user.id
    user = message.from_user.username

    cursor.execute(f"INSERT INTO otchet VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
                   (f'{datetime.datetime.now().strftime("%d-%m-%Y %H:%M")}',
                    check,
                    user,
                    money_in_the_morning,
                    proceeds,
                    cashless,
                    cash_1,
                    collection,
                    costs,
                    fact,
                    kassa,
                    kassa - fact))
    conn.commit()